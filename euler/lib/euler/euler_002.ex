defmodule Euler.Euler002 do
  @moduledoc """
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
                      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.
  """

  @doc """
  Solution of second Euler problem.
  Computes the summatory of even Fibonacci numbers below n.
  """
  @spec solution(number) :: number
  def solution(n) do
    Stream.unfold({0, 1}, fn {a, b} -> {a + b, {b, a + b}} end)
    |> Enum.take_while(fn x -> x <= n end)
    |> Enum.filter(fn x -> rem(x, 2) == 0 end)
    |> Enum.reduce(fn x, sum -> sum + x end)
  end
end
